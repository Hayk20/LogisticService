// <auto-generated />
using LogisticService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogisticService.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogisticService.Models.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");
                });

            modelBuilder.Entity("LogisticService.Models.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Container");
                });

            modelBuilder.Entity("LogisticService.Models.CrushedCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CrushRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsCrushed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CrushedCars");
                });

            modelBuilder.Entity("LogisticService.Models.PricePerKilometer", b =>
                {
                    b.Property<int>("PricePerKilometerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PricePerKilometerId"));

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("PricePerKilometerId");

                    b.ToTable("PricePerKilometer");
                });

            modelBuilder.Entity("LogisticService.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PricePerKilometerId")
                        .HasColumnType("int");

                    b.Property<string>("StartingPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PricePerKilometerId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("LogisticService.Models.Route", b =>
                {
                    b.HasOne("LogisticService.Models.PricePerKilometer", "PricePerKilometer")
                        .WithMany("Routes")
                        .HasForeignKey("PricePerKilometerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PricePerKilometer");
                });

            modelBuilder.Entity("LogisticService.Models.PricePerKilometer", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
